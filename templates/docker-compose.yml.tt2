[%
# How many shards we have for each service. Note that Redis expects to be
# an even number for main/replica pairing.
DEFAULT REDIS_COUNT = env.REDIS_COUNT,
        PG_COUNT = env.PG_REPLICA_COUNT;

# This is where it gets interesting: each of our services
# is defined as a name, a source, and some options. The same
#DEFAULT service_list = [
 # Main API endpoint exposes websockets via nginx
# { name => 'api', ports => [ 80 ], networks => [ 'database' ] }
#];

REDIS_INDICES = [ 0 .. REDIS_COUNT ];
CALL REDIS_INDICES.pop();
PG_INDICES = [ 0 .. PG_COUNT ];
CALL PG_INDICES.pop();

-%]
version: "3.2"

services:
  # The registry for all local images
  registry:
    image: registry:2
    restart: unless-stopped
    ports:
      - "5002:5002"
    environment:
      # REGISTRY_HTTP_TLS_CERTIFICATE: /certs/domain.crt
      # REGISTRY_HTTP_TLS_KEY: /certs/domain.key
      # REGISTRY_AUTH: htpasswd
      # REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd
      # REGISTRY_AUTH_HTPASSWD_REALM: Registry Realm
      REGISTRY_HTTP_SECRET: "${REGISTRY_SECRET}"
      REGISTRY_PROXY_REMOTEURL: https://registry-1.docker.io
      REGISTRY_PROXY_USERNAME: circle4regentmarkets
      REGISTRY_PROXY_PASSWORD: "${DOCKERHUB_PASSWORD}"
    volumes:
      - ./registry/data:/var/lib/registry
      - ./registry/certs:/certs:ro
      - ./registry/auth:/auth

[% FOREACH cat IN category_list -%]
  # Full Redis cluster [% cat.name %] - add more nodes to scale horizontally, ensure that
  # the REDIS_NODES env var is correctly populated to make sure they
  # are all picked up correctly. Note that this should be able to adapt
  # to docker networking changes - on restart the nodes are rediscovered.
[% redis_list = [ ];
pg_list = [];
 FOREACH redis IN REDIS_INDICES;
  r = [cat.name, "redis-node-$redis"];
  redis_list.push(r.join('-'));
 END
-%]
[%
 FOREACH pg IN PG_INDICES;
 p = [cat.name, "pg-$pg"];
 pg_list.push(p.join('-'));
 END
-%]

[% FOREACH redis IN REDIS_INDICES -%]
  [% cat.name %]-redis-node-[% redis %]:
    extends:
      file: redis.yml
      service: redis-node
    networks:
      - [% cat.name %]_redis
    volumes:
      - [% cat.name %]-redis-[% redis %]-data:/bitnami/redis
    environment:
      - "REDIS_NODES=[% redis_list.join(' ') %]"
      - "REDIS_CLUSTER_REPLICAS=0"
      - "REDIS_CLUSTER_SLEEP_BEFORE_DNS_LOOKUP=10"
      - "REDIS_CLUSTER_DNS_LOOKUP_RETRIES=30"
      - "REDIS_DNS_RETRIES=30"
[%  IF redis == '0' -%]
      - "REDIS_CLUSTER_CREATOR=1"
[%  END -%]
[% IF cat.env.REDIS_PASSWORD -%]
      - "REDIS_PASSWORD=[% cat.env.REDIS_PASSWORD %]"
[%  END -%]

[% END -%]
  
# ... end of [% cat.name %] Redis cluster nodes list here

# Dedicated Database for each category [% cat.name %].

[% FOREACH pg IN PG_INDICES -%]
  [% cat.name %]-pg-[% pg %]:
    image: docker.io/bitnami/postgresql-repmgr:14-debian-10
#    ports:
#      - 5432
    volumes:
      - [% cat.name %]-pg-[% pg %]-data:/bitnami/postgresql
    networks:
      - [% cat.name %]_database
    environment:
      - REPMGR_NODE_NAME=[% cat.name %]-pg-[% pg %]
      - REPMGR_NODE_NETWORK_NAME=[% cat.name %]-pg-[% pg %]
      - REPMGR_PRIMARY_HOST=[% cat.name %]-pg-0
      - REPMGR_PARTNER_NODES=[% pg_list.join(',') %]
      - REPMGR_PASSWORD=[% env.REPMGR_PASSWORD  %]
      - POSTGRESQL_PASSWORD=[% cat.env.POSTGRESQL_PASSWORD  %]
      - POSTGRESQL_DATABASE=[% cat.name %]
      # Add specific user from env if needed.


[% END -%]

[% END %]

  # Start list of services

[% FOREACH service IN service_list -%]
  [% service.instance %]:
[%  IF service.build -%]
    build: 
      context: [% service.build.context %]
      dockerfile: [% service.build.dockerfile %]
      args:
[% FOREACH arg IN service.build.args -%]
        [% arg.key %]: "[% arg.value %]"
[% END -%]
[%  ELSIF service.image -%]
    image: [% service.image %]
[%  END -%]
    init: true
    tty: true
    restart: unless-stopped
    environment:
[% FOREACH env IN service.environment -%]
      [% env.key %]: "[% env.value %]"
[% END -%]
[%  IF service.ports -%]
    ports:
[%   FOREACH port IN service.ports -%]
      - "[% port %]"
[%   END -%]
[%  END -%]
    networks:
      - services
      - [% service.category %]_redis
      - [% service.category %]_database
[%  IF service.networks -%]
[%   FOREACH network IN service.networks -%]
      - "[% network %]"
[%   END -%]
[%  END -%]
    depends_on:
[%  FOREACH redis IN REDIS_INDICES -%]
      - [% service.category %]-redis-node-[% redis %]
[%  END -%]
[% FOREACH pg IN PG_INDICES -%]
      - [% service.category %]-pg-[% pg %]
[% END -%]
    volumes:
[% FOREACH volume IN service.volumes -%]
      - [% volume %]
[% END -%]

[% END -%]

  # End list of services

volumes:
[% FOREACH category IN category_list -%]
[% FOREACH redis IN REDIS_INDICES -%]
  [% category.name %]-redis-[% redis %]-data:
[% END -%]
[% FOREACH pg IN PG_INDICES -%]
  [% category.name %]-pg-[% pg %]-data:
[% END -%]
[% END -%]

networks:
  default:
  services:
[% FOREACH category IN category_list -%]
  [% category.name %]_redis:
  [% category.name %]_database:
[% END -%]
